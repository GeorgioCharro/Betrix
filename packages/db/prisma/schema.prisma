// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  googleId          String?            @unique
  email             String             @unique
  name              String?
  password          String?
  picture           String?
  balance           Float              @default(10000)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  provablyFairState ProvablyFairState?
  games             Game[]
  gameResults       GameResult[]
}

model ProvablyFairState {
  id         String   @id @default(cuid())
  userId     String   @unique
  serverSeed String
  clientSeed String
  nonce      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
}

model Game {
  id        String      @id @default(cuid())
  userId    String
  type      String
  betAmount Float
  status    String
  state     Json
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  result    GameResult?
}

model GameResult {
  id           String   @id @default(cuid())
  gameId       String   @unique
  userId       String
  type         String
  betAmount    Float
  payoutAmount Float
  outcome      String // e.g., "win", "loss", "tie"
  resultData   Json // Game-specific result data
  createdAt    DateTime @default(now())
  game         Game     @relation(fields: [gameId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}
