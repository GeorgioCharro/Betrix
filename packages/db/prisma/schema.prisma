// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Game {
  blackjack
  dice
  keno
  mines
  roulette
  plinkoo
}

enum Level {
  none
  vip
  vip_plus
  diamond
}

model User {
  id                 String              @id @default(cuid())
  googleId           String?             @unique
  email              String              @unique
  username           String?             @unique
  name               String?
  code               String?
  dateOfBirth        DateTime?
  password           String?
  picture            String?
  balance            String              @default("126000") // Amount in cents (multiply by 100, default 10000.00)
  xp                 Int                 @default(0)
  level              Level               @default(none)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  provablyFairStates ProvablyFairState[]
  bets               Bet[]
  deposits           Deposit[]
  withdraws          Withdraw[]
  progress           ChallengeProgress[]
  @@map("users")
}

model ProvablyFairState {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  serverSeed       String
  clientSeed       String
  hashedServerSeed String   @default("")
  nonce            Int
  revealed         Boolean  @default(false)
  createdAt        DateTime @default(now())

  updatedAt DateTime @updatedAt
  bets      Bet[]

  @@index([userId, revealed, hashedServerSeed])
  @@map("provably_fair_states")
}

model Bet {
  id                  String            @id @default(cuid())
  betId               BigInt            @unique @default(autoincrement())
  userId              String
  game                Game // The game this bet belongs to
  betAmount           Int // Amount in cents (multiply by 100)
  payoutAmount        Int // Amount in cents (multiply by 100)
  active              Boolean           @default(true)
  betNonce            Int // Unique nonce for this specific bet
  provablyFairState   ProvablyFairState @relation(fields: [provablyFairStateId], references: [id])
  provablyFairStateId String
  state               Json // Game-specific state and result data
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id])

  @@index([provablyFairStateId])
  @@index([game])
  @@map("bets")
}

model Deposit {
  id             String   @id @default(cuid())
  depositId      BigInt   @unique @default(autoincrement())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  amount         Int
  status         String
  depositAddress String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("deposits")
}

model Withdraw {
  id              String   @id @default(cuid())
  withdrawId      BigInt   @unique @default(autoincrement())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  amount          Int
  status          String
  withdrawAddress String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("withdraws")
}
model Challenge {
  id          String   @id @default(cuid())
  challengeId BigInt   @unique @default(autoincrement())
  code        String?  @unique
  name        String
  description String
  prize       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  progress    ChallengeProgress[]
  @@map("challenges")
}

model ChallengeProgress {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  user        User     @relation(fields: [userId], references: [id])
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@map("challenge_progress")
}